#!/usr/bin/env node

'use strict';

/**
 * TinyLiquid命令行工具
 *
 * @author 老雷<leizongmin@gmail.com>
 */
 
var fs = require('fs');
var path = require('path');
var colorConsole = require('./lib/console');
var utils = require('./lib/utils');
var tinyliquid = require('../');


var tag = process.argv[2];
var dir = process.argv[3];
tag = String(tag).toLowerCase();
dir = path.resolve(dir);

var L = colorConsole.info;
var E = colorConsole.error;
var W = colorConsole.warn;
var D = colorConsole.debug;
var C = function () {
  console.log('---------------------------------------------------');
};

var printHelp = function () {
  L('');
  L('tinyliquid usage');
  L('');
  L('  test [path] [ext name]    compile all template files of the specified path for testing');
  L('  help                     print this help information');
  L('');
};

var testDir = function () {
  L('test path: %s', dir);
  var extname = process.argv[4];
  if (typeof extname === 'string') {
    if (extname[0] !== '.')
      extname = '.' + extname;
    L('ext name: %s', extname);
  }
  C();
  
  var stats = fs.statSync(dir);
  if (!stats.isDirectory())
    var list = [dir];
  else
    var list = utils.listdir(dir, extname).file;
    
  var errorList = [];
  process.on('exit', function () {
    C();
    errorList.forEach(function (line) {
      var L = colorConsole.log;
      L('file: \x1B[33m%s\x1B[39m', line.filename);
      L('  \x1B[32m[%s]\x1B[39m', line.lineNum);
      L('    \x1B[33m%s\x1B[39m', line.line);
      L('  ---');
      L('  - code:  \x1B[36m%s\x1B[39m', line.code);
      L('  - error: \x1B[33m%s\x1B[39m', line.error);
      C();
    });
    if (errorList.length > 0)
      E('finish. total %s fail.', errorList.length);
    else
      D('finish. all is ok.');
  });
  
  list.forEach(function (f) {
    L('file: %s', f);
    try {
      var text = fs.readFileSync(f, 'utf8');
      try {
        var fn = tinyliquid.compile(text);
      }
      catch (err) {
        E('  - fail: %s', err.stack);
        var code = tinyliquid.compile(text, {noeval: true}).code;
        utils.makeErrorInfo(f, text, code, function (err, info) {
          if (err)
            W('  - test file %s: %s', f, err.stack);
          else
            errorList.push(info);
        });
      }
    }
    catch (err) {
      E('  - fail: %s', err);
    }
  });
};


switch (tag) {
  case 'test':
    testDir();
    break;
  default:
    printHelp();
}
